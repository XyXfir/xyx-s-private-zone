c语言程序的思想 the thinking of the c language application
1.枚举法[enumeration method]
	concluded by examining all possible senarios for certain types of event
#include <stdio.h>
 int main()
 {	printf("hello!world"\n);
 	return 0;
 }
注意:不要用中文输入法.
     ""内是原封不动输出的字节
     
例题:算找零
   printf("23+43=\d \n",23+43);
   printf("100-23=\d \n",100-23);
   需要:
    有地方放输入的数字;
    有办法输入数字;
    输入的数字能参与运算;
题1.     change.c
  #include<stdio.h>
  int main()
  {	int price=0;
  	 printf("请输入金额(元);");
	 scanf("%d,&price");
	int change=100-price;
	 printf("找您%d元"\n,change);
  }
  变量   int pirce=0;
         这一行定义了变量,名字为price,类型是int,初始值是0.
         变量是一个保存数据的地方,当需要再程序里保存数据时,如上面例子中要记录用户输入价格,就需要一个变量来保存他.用一个变量来保存了数据,它才能参加到后面的计算中
         一般形式:<类型名称><变量名称>;
         举例: int price;
               int amount;
  变量的名字--标识符
         用来识别这个和那个的不同的名字.
         构造规则:
                基本原则:只能用字母,数字,下划线组成,开头不能用数字
                c语言的关键字(保留字)不可以用作标识符
                关键字:auto,break,case,char,const,continue,default,do,double,else,enum,extern,float,for,goto,if,int,long,register,return,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile,while,inline,restrict
                 不需要背,程序会提示
  赋值和初始化
         int price =0;
         等号把右边的数据交给左边,因为0是初始值,所以又叫初始化.
      赋值:
          在数学中,a=b表示关系,即a和b的值一样;
          在程序设计中,a=b表示要求计算机做一个动作:将b的值赋给a.
          关系是静态的,动作是动态的.在数学中a=b和b=a是等价的,再程序设计中则完全相反.
      初始化:
          <类型名称><变量名称>=<初始值>;
	  int price=0;
	  int amount=100;
	  组合变量定义的时候,也可以在这个定义中单独给单个变量赋初值,
	  如:int price=0,amount=100;
      表达式(expression):
      	  "="是赋值运算符,有运算符的狮子叫做表达式.
	  price=0;
	  change=100-price;
  变量类型
    	  int price=0;
	  这一行定义了变量,名字为price,类型是int,初始值是0.
	  c语言是一种有类型的语言,所有的变量在使用之前必须定义或声明,所有的变量必须有确定的数据类型.数据类型表示在变量中存放什么样的数据,变量中只能存放指定类型的数据,程序运行过程中也不能改变变量的类型.
  常量
  	  int change=100-price;
	  固定不变的数,是常数.直接写在程序里,我们称作直接量(literal).
	  更好的方式,是定义一个常量:const int AMOUNT=100;
      const
          const是一个修饰符,加在int的前面,用来给这个变量加上一个const(不变的)的属性.这个const的属性表示这个变量的值一旦初始化,就不能再修改了.
	  int change=AMOUNT-price;
	  如果你试图对常量做修改,把它放在赋值运算符的左边.就会被编译器发现,指出为一个错误.
题2    计算身高
  #include<stdio.h>
  main()
  {	int foot;
  	int inch;    
	scanf("%d %d",&foot,&inch);
	printf("身高是%f米.\n",((foot+inch/12)*0.3048));
  }
  浮点数:
  	  带小数点的数值.浮点这个词的本意就是指小数点是浮动的,是计算机内部表达非整数(包含分数和无理数)的一种方式.另一种方式叫做定点数,不过在c语言中你不会遇到定点数.人们借用浮点数这个词来表达所有的带小数点的数.
       改进:(foot+inch/12)*0.3048->(foot+inch/12.0)*0.3048
      double:
      	inch是定义为int类型的变量,如果把int换成double,我们就把它改为double类型的浮点数变量了.
	double的意思就是"双",它本来就是"双精度浮点数"的第一个单词,人们用来表示浮点数类型.除了double,还有float(意思是浮点!)表示单精度浮点数.
       改进:int foot;
  	    int inch;    
	    scanf("%d %d",&foot,&inch);
	    -->
	    double foot
       	    double inch;
       	    scanf("%ld %ld",&foot,&inch);
  表达式:
  	  一个表达式是一系列运算符和算子的组合,用来计算一个值.
      运算符:
      	  运算符(operator)是指进行运算的动作,比如加法运算符"+",减法运算符"-".
	  算子(operand)是指参与运算的值,这个值可能是常数,也可能是变量,还可能是一个方法的返回值.
题3      计算时间差
  #include<stdio.h>
  main()
  {     int hour1,minute1;
  	int hour2,minute2;
	int t1,t2;
	int t;
	scanf("%d %d",&hour1,&minute1);
	scanf("%d %d",&hour2,&minute2);
	t1=hour1*60+minute1;
	t2=hour2*60+minute2;
	t=t2-t1;
	printf("时间差是%d小时%d分钟",t/60,t%60);
   }  
  	t1=hour1*60+minute1;->转换分钟为单位
	t/60->小时部分;t%60->分钟部分
  复合赋值
        五个运算符,+-*/%,可以和赋值运算符"="结合起来,形成复合赋值运算符:"+=","-=","*=","/="和"%="
	total+=5;
	<=>
	total=total+5;
        注:两个运算符之间不要有空格
     辨析:
        total+=(sum+100)/2;
	<=>total=total+(sum+100)/2;
	total*=sum+12;
	<=>total=total*(sum+12);
  递增递减运算符:
  	"++"和"--"是两个很特殊的运算符,他们是单目运算符,这个算子还必须是变量.这两个运算符分别叫做递增和递减运算符,他们的作用就是给这个变量+1或者-1.
     前缀后缀:
        放在变量之前或者之后,分别是前缀形式和后缀形式
        表达的值也不同a++表达的是a的值,之后再加1,++a是a+1的值.
题4    交换两个变量
     int a=6;
     int b=5;
    如何交换a b 两个变量的值?
   思想:程序表达的是顺序执行的动作,而不是关系
        a=b;
        b=a;
        是依次执行的,结果使得a和b又得到b原来的值.所以需要一个额外的变量来储存a的值
	int t;
	t=a;a=b;b=t;
题5    求平均值
    int a,b;
    scanf("%d %d",&a,&b);
    double c=(a+b)/2.0;       *2.0是因为有小数,没有".0"则会输出一个整数.
    printf(""%d和%d的平均值=%f\n",a,b,c);
##if语句##
    一个基本的if语句有一个关键字if开头,跟上在括号里的一个表示条件的逻辑表达式.如果表示条件的逻辑表达式的结果不是零,那么就执行后面跟着的这对大括号中的语句,否则就 跳过这些语句不执行,而继续下面的其他语句.
    *if语句这一行结束的时候并没有表示语句结束的";",而 后面的赋值语句卸载if的下一行,并且缩进了,在这一行结束的时候有一个表示语句结束的";".这表明这条赋值语句是if语句的一部分,if语句拥有和控制这条赋值语句,决定它是否要被执行.
    if(total>amount)
    	total+=amount+10; 
题6     计算薪水
    const double RATE=8.25;
    const int STANDARD=40;
    double pay=0.0;
    int hours;
    printf("请输入工作的小时数:");
    scanf("%d",&hours);
    printf("\n");
    if(hours>STANDARD)
    	pay=STANDARD*RATE+(hours-STANDARD)*(RATE*1.5);
    else
    	pay=hoours*RATE;
    printf("应付工资:%f"\n,pay);
  关系运算:
      计算两个值的关系. 
        运算符		 意义
         = =		    相 等
         !=		    不相等
	  >		    大于
	 > =		    大于或等于
	  <		    小于
	 < =		    小于或等于
  关系运算的结果:
        当两个值的关系符合关系运算符的预期时,关系运算的结果为整数1,否则为整数0.
  优先级:
        所有的关系运算符的优先级比算数运算的低,但是比赋值运算的高.
        判断是否相等的= =和!=的优先级比其他的低,而连续的关系运算是从左到右进行的
        5>3==6>4  -> 
    		    = = 优先级低所以要先看5和3以及6和4的关系
  注释(comment):
        插入程序代码中,用来向读者提供解释信息.他对于程序的功能没有任何影响,但是往往能使得程序更容易被人类读者理解.
        以两个斜杠"//"开头的语句把程序分成了若干部分
     /**/注释
        延续数行的注释,要用多行注释的格式来写.多行注释由一对字符序列"/*"开始,而以"*/"借宿.
        也可以用于一行内的注释
题7  //初始化
     int price=0;
     int bill=0;
     //读入金额和票面
     printf("请输入金额");
     scanf("%d",&price);
     printf("请输入票面");
     scanf("%d",&bill);
     //计算找零
     if(bill>=price)
     {
      printf("应该找您:%d\n",bill-price);
     }
     else
     {
     printf("钱不够\n" )
题8  int hour1,minute1;
     int hour2,minute2;
     int ih,im;
     scanf("%d %d",&hour1,&minute1);
     scanf("%d %d",&hour2,&minute2);
     ih=hour1-hour2;
     im=minute1-minute2;
     if(im<0)
     {
     im=60+im;
     ih--;
     }
     printf("时间差是%d小时%d分钟",ih,im);
   }  
        if语句常见的错误:
	忘了大括号;:永远在if和else后面加上大括号,即使当时后面只有一条语句.
        if后面的分号:一定不能在if后面加";"
        错误使用==和=:"=="是关系运算符而"="是赋值运输符,意义不同.
        使人困惑的else;
	*warning一定要给予尊重! 
##switch-case##
        if(type==1)				switch(type)
         printf("ni hao");			{  case 1:
        else if(type==2)				printf("早上好");
  	  printf("早上好");			     break;
        else if(type==3)			   case 2:
  	  printf("中午好");			     printf("中午好");
        else if(type==4)				break;
  	  printf("晚上好");			case 3:
        else						printf("晚上好");
      	  printf("啊?");    		               break;
					           case 4:
					        	printf("再见");
					        	break;
					          default:
					        
						printf("啊?");
					}
  
    不同:if语句是从第一个关系按顺序依次判断
        而switch语句直接选择与之相匹配的表达式再进行按顺序执行
  switch(控制表达式)
  {
   case 常量:
    语句
    ...
   default:
    语句
    ...
  }
  	控制表达式只能是整数(int)类型
  	常量可以是常数,也可以是常数计算的表达式
    break:阻止程序继续运行.
  级联的if-else if
	格式:if()
		{}
	else{if()
		{}
		}
  嵌套的if-else 
        格式:if()
	{if{}
	 else{
	 	if{}
	 	else{}
	     }
	 }
  else的匹配:
       总是和最近的那个if匹配,所以需要{}来界定范围.
##do-while##
       在进入循环的时候不做检查,而是在执行完一轮循环体的代码后,再来检查循环的条件是否满足,如果满足则继续下一轮循环,不满足则结束循环.
       do
       {
    	   <循环体语句>
       }while(<循环条件>); 
##while##
       当条件满足时,不断的重复循环体内的语句.
       循环执行之前判断是否继续循环,所以有可能循环一次或者一次也没有被执行
       条件成立时循环继续的条件
       if和while:
       		 格式相同
		 前者只执行一次,后者执行多次
  看程序运行结果
       人脑模拟计算机运行,在纸上列出变量,随程序进展不断重新计算变量的值.当程序运行结束时,留在表格最下面的就是程序的最终结果.
  程序实现
       应从高处往下判断,这样不用判断上限.
     
     
题8   猜数游戏

#include<stdio.h>
#include<stdlib.h>
#include<time.h>

int main()
{
	srand(time(0));
	int num=rand()%100+1;
	int count=0;
	int a=0;
	printf("我已经想好了一个1到100之间的数");
	scanf("%d",&a)
	do
	{
	printf("请猜这个1到100之间的数");
	scanf("%d",&a);
	count++;
		if(a>num)
		{
			printf("你猜的数大了");
		}
		else if (a<num)
		{
			printf("你猜的数小了");
		}
	}while(a!=num); 
	printf("%d次猜到了答案",count);
	return 0;
}


计算循环  小套路:
		 计算之前先保存原始的值,后面可能有用
		 如果需要很大次数的循环,可以模拟较少的循环次数,然后作出推断.
		 
整数分解:
	 对一个整数做%10的操作,就得到它的个位数
	 对一个整数做/10的操作,就去掉了它的个位数
	 以此类推
	 
##for语句##
	for循环像一个计数循环:设定一个计数器,初始化它,然后在计数器到达某值之前,重复执行循环体,而每执行一轮循环体,计数器值以一定步进进行调整,比如加1或者减1.
	for可以理解为"对于",对于一开始的...,当条件成立时重复做循环体,每一轮循环语句后,对步进进行调整.\
           小套路:求和时初始值为0,求积时变量初始化为1.
		  循环控制变量i在循环里被使用了,在循环外面它没有任何用处.因此,可以将变量i定义到for语句中(c语言不可以直接用 )
	

    

函数
  函数: 是一块代码,接受零个或者多个参数,做一件事情,并返回零个或一个值
	     可以先想像成数学中的函数
	     
  函数声明:
  	void sum(int begin,int end);
  函数定义:     
	void sum(int begin,int end)
	{
		int i;
		int sum=0;
		for(i=begin,i<=end;i++)
		{
			sum=+i;
		}
		printf("%d到%d的和是%d\n",begin,end,sum);
	}
        返回类型 函数名(参数表)
	{
	    函数体
	}
  函数调用:
        	函数名(参数值);
		()起到了表示函数调用的重要作用
        	即使没有参数也需要()
	        如果有参数,则需要给出正确的数量和顺序
		这些值会被按照顺序依次用来初始化函数中的参数
  函数返回:函数知道每一次是哪里调用它会返回到正确的地方
	
	return:停止函数的执行,并送回一个值
	       	return;
	       	return 表达式;
  从函数中返回值:
	   		 可以赋值给变量
			 可以再传递给函数
			 可以丢掉
  没有返回值的函数:
       	       void 函数名(参数表)
	       不能是同带值的return
	       可以没有return
	       调用的时候不能做返回值的赋值
  本地变量:
  	       函数的每次运行,就产生了一个独立的变量空间,在这个空间的变量,是函数的这次运行所独有的,称作本地变量
	       定义在函数内部的变量就是本地变量
	       参数也是本地变量
  变量的生存期和作用域:
               生存期:什么时候这个变量开始出现了,到什么时候消亡了
	       作用域:在(代码的)什么范围内可以访问这个变量(这个变量可以起作用)
	       对于本地变量,这两个问题的答案是统一的:大括号"{}"内---块
  本地变量的规则:
               本地变量是定义在块内的
	         它也可以是定义在函数的块内
		 也可以定义在语句的块内
		 甚至可以随便拉一个大块来定义变量
	       程序运行进入这个块之前,其中的变量不存在,离开这个块,其中的变量就消失了
	       块外面定义的变量在里面仍然有效
	       块里面定义了和外面同名的变量则掩盖了外面的
	       不能在一个块内定义同名的变量
	       本地变量不会被默认初始化
	       参数在进入函数的时候被初始化了
  调用函数:
	       如果函数有参数,调用函数时必须传递给它数量 类型正确的值
	       可以传递给函数的值是表达式的结果,这包括:字面量 变量 函数返回值 计算的结果                        
  类型不匹配:
  	       调用函数时给的值与参数的类型不匹配时c语言传统上最大的漏洞
	       编译器总是悄悄替你把类型转换好,但是这很可能不是你所期望的
	       后续的语言,C++/Java在这方面很严格
  传值:
  	       每个函数有自己的变量空间,参数也位于这个独立的空间中,和其他函数没有关系
	       过去,对于函数参数表中的参数,叫做"形式参数",调用函数时给的值,叫做"实际参数"
	       由于容易让初学者误会实际参数实际在函数中进行计算的参数,误会调用函数的时候把变量而不是值传进去了,所以我们不建议继续用这种古老的方式来称呼他们
  没有参数时:    
  	       void f(void);
  	       void f()表明不知道参数,而不是没有参数
  逗号运算符:  调用函数时的圆括号里的逗号时标点符号,不是运算符 ---f(a,b)	       
   	       而f((a,b))则是逗号运算符 
关于main:
	       int main()也是一个函数
	       写成int main(void)也可以
	       return 0;  :Windows:if errorlevel 1..
	       		   Unix Bash: echo $?
			   Csh: echo $status
	       对应的系统代码可以来看这个return 0;的
  函数先后关系:c的编译器会自上而下的顺序分析你的代码
               (所以main一般写在下面,把其他函数写在上面)
  函数原型:
  	      函数头,以分号";"结尾,就构成了函数的原型
	      函数原型的目的是告诉编译器长什么样:名称   参数(数量及类型)   返回类型
	      (对应函数声明)
	      旧的标准习惯是把函数原型写在调用它的函数里面
	      现在一般写在调用它的函数前面
	      原型里可以不写参数的名字,但是一般仍然写上 
	     





   
    
  运算符&:    
   	      scanf("%d",&i);
  	      获得变量的地址,它的操作数必须是变量
	        int i; printf("%x",&i);
      	      地址的大小是否与int相同取决于编译器
	        int i  printf("%p",&i);
	"&"不能取的地址
	      &不能对没有地址的东西取地址
	"&"能取的地址:
	      printf("%p\n",&i);      变量的地址分配在堆栈(stack)的地方,分配内存给变量是自上而下分配,先分配的高,后分配的低
	      printf("%p\n",&p);      相邻变量的地址的差距是4,因为字节长度是4
  指针:
  	      int *p=&i;  p指向i:p里面的值就是i里面的地址.
  指针变量:
  	      变量的值是内存的地址
	      普通变量的值是实际的值
	      指针变量的值是具有实际值的变量的地址
  作为值参数的指针:
  	        void f(int *p);
	      在被掉用的时候得到了某个变量的地址
	        int i=0;
		f(&i);
	      在函数里面可以通过这个指针访问外面的这个i.
  访问那个地址上的变量:
  	      *是一个单目运算符,用来访问指针的值所表示的地址上的变量
	      可以做右值可以做左值
	        int k=*p;
		*p=k+;
  指针的运算符&*:
  	       互相反作用: 
	       		  *&yptr -->*(&yptr) -->*(yptr的地址) -->得到地址的变量 -->yptr
	       		  &*yptr -->&(*yptr) -->&(y) -->得到y的地址,也就是yptr -->yptr
  指针应用场景一:
	      交换两个变量的值
	       void swap(int *pa,int *pb)
	       {
	            int t=*pa;
		    *pa=*pb;
		    *pb=t;
	       }
  指针应用场景二:
   	      函数返回多个值,某些值就只能通过指针返回
	      传入的参数实际上是需要保存带回的结果的变量
  指针应用场景二b:
  	      函数返回运算的状态,结果通过指针返回
	      常用的套路是让函数返回特殊的不属于有效范围内的值来表示出错:-1或0(在文件操作会看到大量的例子)
	      但是当任何数值都是有效的可能结果是,就得分开返回了.
	      后续的语言(c++,java)采用了异常机制来解决这个问题
  数组参数:   
   	      以下四种函数原型是等价的:
	      	int sum(int *ar,int n);
		int sum(int *,int);
		int sum(int ar[],int n);
		int sum(int[],int);
  *数组变量是特殊的指针:
   	      数组变量本身表达地址,所以
	      	int a[10],int *p=a; //无需用&取地址
   	        但是数组的单元表达的是变量,需要用&取地址
			a==&a[0];
		[]运算符可以对数组做,也可以对指针做:
			p[0]<==>a[0]
		*运算符可以对指针做,也可以对数组做:
			*a=25;
	        数组变量是const的指针,所i不能被赋值:
			int b[] <-->int * const a=...
指针与const
  
  指针是const:
  	        表示一旦得到了某个变量的地址,不能再指向其他变量
		 	int* const q=&i;  //q是const
			*q=26;  //ok
			q++;   /error
  所指是const:
   	        表示不能通过这个指针去修改那个变量(并不能是使得那个变量成为const)
		     	const int *p=&i;
			*p=26; //error(*p)是const
			i=26;  //ok
			p=&j;  //ok
			
		*如果const在*的前面,表示它所指向的不能被改变,如果const在*的后面,表示指针不能被修改
  转换:
  	        总是可以把一个非const的值转换成const的
		        void f(const int *x);
			int a =15;
			f(&a);  //ok
			const int b=a;
			f(&b);  //ok
			b=a+1;  //error
	        当要传递的参数的类型比地址大的时候,这时常用的手段:既能用比较少的字节数传递值给参数,又能避免函数对外面的变量的修改.
  const数组:
  	        const int a[]={1,2,3,4,5,6};
	        数组变量已经是const的指针了,这里的const表明数组的每个单元都是const int
	        所以必须通过初始化进行赋值
  保护数组数:
  	        因为把数组传入函数时传递的时地址,所以那个函数内部可以修改数组的值
	        为了保护数组不被破坏,可以设置参数为const
		        int sum(const int a[],int length);
  1+1=2?
  	        给一个指针加1表示要让指针指向下一个变量
			int a[10];
			int *p=a;
			*(p+1) -->a[1]
	        如果指针不是指向一篇连续分配的空间,如数组,则这种运算没有意义
  指针运算:
  	        这些算数运算可以对指针做;
	          指针加 减一个整数(+,+=,-=)
	          增递减(++/--)
	          两个指针相减:等于有几个相同类型的存储东西的地方(相减再除以当前类型长度)
  *p++:
  	        取出p所指的那个数据来,完事之后顺便把p移到下一个位置去
		*的优先级虽然高,但是没有++高
	        常用于数组类的连续空间操作
	        在某些cpu上,这可以直接被翻译成一条汇编指令
  指针比较:
  	        <,<=,==,>=,!=都可以对指针做
                比较它们再内存中的地址  		
	        数组中的单元的地址肯定是线性递增的
  0地址:
  	        当然你的内存中有0地址,但是0地址通常是个不能随便碰的地址
	        所以你的指针不应该具有0值
	        因此可以用0地址表示来特殊的事情
	          返回的指针是无效的
		  指针没有被真正初始化
	        NULL是一个预定定义的符号,表示0地址
	        有的编译器不愿意你用0来表示地址
  指针类型:
     	        无论指向什么类型,所有的指针的大小都是一样的,因为都是地址
	        但是指向不同类型的指针是不能直接互相赋值的
	        这时为了避免用错指针
  指针的类型转换:
  	        void*表示不知道指向什么东西的指针
		  计算时与char*相同(但不相通)
	        指针也可以转换类型
		  	int *p=&i;
			void *q=(void*)p;
	        这并没有改变p所指的变量的类型,而是让后人用不同的眼光通过p看它所指的变量.
		  我不再当你时int了,我认为你就是个void!
  总结(用指针来做什么):
  	        需要传入较大的数据时用作参数
	        传入数组后对数组做操作
	        函数返回不止一个结果
		  需要用函数来修改不止一个变量
	        动态申请的内存		
  输入数据:
                如果输入数据时,先告诉你个数,然后再输入,要记录每个数据
	        C99可以用变量做数组定义的大小,C99之前,人们使用动态内存分配:
			int *a=(int*)malloc(n*sizeof(int));
		        *需要头文件include<stdlib.h>
例子
  #include<stdio.h>
  #include<stdlib.h>
  
  int main(void)
  {
  	int number;
	int* a;
	int i;
	printf("输入数量:")
	scanf("%d",&number);
	//int a[number];
	a=(int*)malloc(number*sizeof(int));
	for (i=0;i<number;i++)
	{
		scanf("%d",&a[i]);
	}
	for(i=number-1;i>=0;i--)
	{
		printf("%d",a[i]);
	}
	free(a);
	
	return 0;
  }
  malloc:
	        #inlcude<stdlib.h>
		void* malloc(size_t size);
	        向malloc申请的空间的大小是以字节为单位的
	        返回的结果是void*,需要类型转换为自己需要的类型
			(int*)malloc(n*sizeof(int));
  没空间:
    	        没有空间则会返回0或者NULL 
  free():
  	        把申请得来的空间还给"系统"
                申请过的空间,最终都应该要还的
		  "出来混,迟早要还的"
  常见问题:
  	        申请了没free-->长时间运行内存逐渐下降
	          新手:忘了
		  老手:找不到合适的free时机
	        free过了再free
	        地址变过了,直接去free
		 
		 
		 
		 
