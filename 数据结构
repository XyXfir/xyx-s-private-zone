数据结构内容:基本数据组织和数据处理方法
地位:承上启下
关系:基本的算法设计
求解问题:数据逻辑结构(提炼)->数据存储结构(设计)->数据基本运算:算法(实现)
学习方法:
        1.理解各种数据结构的逻辑特性和存储结构设计
        2.掌握各种数据结构算法设计的基本方法
        3.利用各种数据结构来求解实际问题
        4.演绎和归纳相结合
数据结构定义:
        1.数据:所有能够输入到计算机中,且能被计算机处理的符好的集合
          *数据结构中主要讨论结构化数据
        2.数据元素:是数据(集合)中的一个"个体",是数据的基本单位
        3.数据项:数据项是用来描述数据元素的,它是数据的最小单位
        4.数据对象:具有相同性质的若干个数据元素的集合,如整数数据对象是所有整数的集合
          *默认情况下,数据结构中讨论的数据都是数据对象
          
        5.数据结构:带结构的数据元素的集合
          *数据结构=数据对象+结构
数据结构的构成:  逻辑结构->存储结构->数据运算
        1.数据元素之间的逻辑关系-->数据的逻辑结构
        2.数据元素及其关系再计算机存储器中的存储方式-->数据的存储结构(或物理结构)
        3.施加在该数据上的操作-->数据运算
二元组:  一种通用的逻辑结构表示方法
        B=(D,R)
        其中B是一种数据结构,它由数据元素的集合D和D上二元关系的集合R所组成
        其中:     
          D={d[i]|1<=i<=n,n>=0};数据元素的集合
          B={r[j]|1<=j<=m,m>=0};关系的集合
        每个关系的用若干个序偶来表示:
          序偶<x,y>(x,y属于D)-->x为第一元素,y为第二元素
          x为y的前趋元素
          y为x的后继元素
          若某个元素没有前趋元素,则称该元素为开始元素;若某个元素没有后继元素,则称该元素为终端元素
          *序偶<x,y>表示x.y是有向的,序偶(x,y)表示x.y是无向的
数据的存储结构表示:
        数据在计算机存储器中的存储方式的存储结构,他是面向程序员的
          逻辑结构---映射--->存储结构
        需要满足的要求:
          1.存储所有元素
          2.存储数据元素间的关系 
结构体数组Stud:
        struct
        {  int no;        //存储学号
           char name[8];  //存储姓名
           char sex[2];   //存储性别
           char class[4]; //存储班号
         }Stud[7]={{1,"张斌","男","9901"},....}; 
顺序存储结构:
         两个逻辑上相邻元素直接映射到存储空间,在存储空间中也相邻.
       特点:
         1.所有元素占用一整块内存空间
         2.逻辑上相邻的元素,物理上也相邻
链表StudType:
        typedef struct studnode
        {  int no;                 //存储学号
           char name[8];           //存储姓名
           char sex[2];            //存储性别
           char class[4];          //存储班号
           struct studnode *next   //存储指向下一个学生的指针
        }StudType
链式存储结构:
        特点:
          1.一个逻辑元素用一个节点存储,每个节点单独分配,所有节点的地址不一定是连续的.
          2.用指针来表示逻辑关系.
数据运算:
        数据运算是对数据的操作.分为两个层次:运算描述和运算实现
          对于"学生表"这种数据结构,可以进行一系列运算
          增删查学生的... ---运算描述
逻辑结构类型: 
        1.集合:
          元素之间关系:无
          特点:只是同属于一个集合,是最松散的
        2.线性结构:
          元素关系:一对一
          特点:开始元素和终端元素都是唯一的,除此之外,其余元素都有且仅有一个前趋元素和一个后继元素.
        3.树形结构:
          元素关系:一对多
          特点:开始元素唯一,终端元素不唯一.除终端元素外,每个元素有一个或多个后续元素;除开始元素外,每个元素有且仅有一个前趋元素.
数据类型和抽象数据类型
1.数据类型:
        在高级程序语言中提供了多种数据类型,不同数据类型的变量,其所能取的值的范围不同,所能进行的操作不同
        *是一个值的集合和定义在此集合上的一组操作总称
        ej.   int-->  -32768~32767--值的集合
                 -->  + - * /     --一组操作          
数据类型和数据结构的关系:数据类型就是已经实现了的数据结构          
2.抽象数据类型:
        抽象数据类型(ADT)指的是从求解问题的数学模型中抽象出来的数据逻辑结构和运算(抽象运算),而不考虑计算机的具体实现
        *抽象数据类型=逻辑结构+抽象运算
ADT Complex
{ 
        数据对象:D={e1,e2|e1,e2均为实数}
        数据关系:R={<e1,e2>|e1是复数的实部,e2是复数的虚部
        AssignComplex(&z,v1,v2)     //构造复数Z
        DestroyComplex(&z)          //复数z被销毁
        GetReal(z,&real)            //返回复数z的实部值
        GetImag(z,&Imag)            //返回复数z的虚部值
        Add(z1,z2,&sum)             //返回两个复数的z1 z2的和
}ADT Complex
抽象数据类型实质:对一个求解问题的形式化描述(与计算机无关),程序员可以在理解基础上实现它.      

数据结构求解问题的过程
        ADT =逻辑结构+抽象运算(功能描述)   ---问题描述
  映射到     ->>   存储结构1...n          ---设计存储结构
  运算实现   ->>   算法1...n              ---算法设计 
  分析出     ->>   最佳算法               ---算法分析







